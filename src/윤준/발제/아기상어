# 백준 16236번: 아기 상어

## 메모리 
- 25844 kb

## 시간
-260 ms

## 📌 문제 개요

- **격자 크기 N×N**의 공간에 상어와 물고기들이 배치됨
- 상어는 처음 크기 2, 먹은 물고기 수가 현재 크기와 같아지면 크기 +1
- 상어는 **자신보다 작은 물고기만 먹을 수 있음**
- **자신과 같은 크기의 물고기는 통과는 가능하지만 먹지 못함**
- 가장 가까운 물고기를 먹으며 이동함:
    - 거리가 같다면 **위 → 왼쪽** 우선순위

---

## 🎯 목표

- 아기 상어가 **더 이상 먹을 물고기가 없을 때까지** 반복해서 먹이를 찾아 먹음
- 상어가 **움직인 거리의 총합**을 출력

---

## ✅ 알고리즘 설계

### 1. BFS(너비 우선 탐색)

- 상어가 현재 위치에서 **먹을 수 있는 가장 가까운 물고기 탐색**
- BFS를 이용해 **모든 위치까지의 최단 거리 계산**
- **먹을 수 있는 후보가 여럿일 경우**, 아래 우선순위대로 선택
    1. 가장 가까운 거리
    2. 위쪽에 있는 물고기
    3. 왼쪽에 있는 물고기

### 2. 물고기 먹기

- 먹을 수 있는 물고기가 있다면:
    - 그 위치로 이동 (거리만큼 count 증가)
    - 그 칸을 0으로 만들고
    - 먹은 횟수 누적 → 크기 증가 여부 판단

### 3. 다시 BFS 반복

- 먹은 지점이 새로운 출발점이 되고
- 다시 BFS를 반복해 새로운 먹잇감 탐색

---

## 💡 주요 구현 포인트

| 항목 | 처리 방식 |
| --- | --- |
| **방문 배열** | `visited[x][y]` → BFS마다 초기화 |
| **거리 기록** | `dist[x][y] = dist[curX][curY] + 1` |
| **먹이 후보 비교** | 거리 → x좌표 → y좌표 순으로 최솟값 비교 |
| **탐색 방향 우선순위** | `dx = {-1, 0, 1, 0}`, `dy = {0, -1, 0, 1}` → 상, 좌, 하, 우 |

---

## ⚠️ 주의할 점

| 내용 | 설명 |
| --- | --- |
| ✅ 크기 비교 조건 | `0 < 물고기 크기 < 상어 크기`만 먹을 수 있음 |
| ✅ 같으면 이동만 가능 | `물고기 크기 == 상어 크기`는 통과만 가능 (먹을 수 없음) |
| ✅ 크면 벽 역할 | `물고기 크기 > 상어 크기`는 아예 이동 불가 |
| ✅ BFS 탐색마다 visited/dist 초기화 | 새로운 탐색마다 매번 초기화 필요 |
| ✅ 물고기를 못 찾으면 종료 | BFS 후 물고기 후보가 없다면 break |

---

## ⏱️ 시간 복잡도 분석

### 🔍 한 번의 BFS

- `O(N^2)` → 전체 격자를 탐색해야 하므로

### 🔁 총 수행 횟수

- 상어는 **먹을 수 있는 물고기 수만큼** BFS를 반복
- 최대 N^2개의 물고기를 먹는다 가정 시
    
    → BFS 최대 `N^2`번 반복
    

### 🔢 최종 시간 복잡도

> O(N^2 × N^2) = O(N^4)
> 

→ 하지만 일반적인 N 제한이 `N ≤ 20`이므로,

→ 최악의 경우 `20^4 = 160,000` → **충분히 통과 가능**